#include <stdio.h>
#include <stdlib.h>
#include "flexarray.h"

void *emalloc(size_t s){
    void *result = malloc(s);
    if(result == NULL){
        fprintf(stderr, "memory allocation failure \n");
        exit(EXIT_FAILURE);
    }
    return result;
}

void *erealloc(void *p, size_t s){
    void *result = realloc(p,s);
    if(result == NULL){
        fprintf("memory reallocation failure \n");
        exit(EXIT_FAILURE);
    }
    return result;
}

struct flexarrayrec{
    int capacity;
    int itemcount;
    int *items;
};
flexarray flexarray_new(){
    flexarray result = emalloc(sizeof *result);
    result->capcity = 2;
    result->itemcount= 0;
    result->items = emalloc(result->capcity * sizeof result items[0]);
    return result;
}




flexarray flexarray_new(){
    flexarray result = emalloc(sizeof *result);
    result->capacity = 2;
    result->itemcount = 0;
    result->items = emalloc(result->capacity *sizeof result->items[0]);
    return result;
}


flexarray flexarray_new(){
    flexarray result = emalloc(sizeof *result);
    result->capacity = 2;
    result->itemcount= 0;
    result->items = emalloc(result->capacity *sizeof result->items[0]);
    return result;
}

void flexarray_append(flexarray f, int num){
    if(f->itemcount == f->capacity){
        f->capacity += f->capacity;
        f->items = erealloc(f->items, f->capacity *sizeof f->items[0]);
    }
    f->items[f->itemcount++] = num;
}
void flexarray_append(flexarray f, int num){
    if(f->capacity == f->itemcount){
        f->capacity += f->capacity;
        f->items = erealloc(f->items, f->capacity *sizeof f->items[0]);
    }
    f->items[f->itemcount ++] = num;
}

void flexarray_print(flexarray f){
    int i;
    for(i = o;i < f->itemcount; i++){
        printf("%d\n" , f->items[i]);
    }
}

void flexarray_print(flexarray f){
    int i;
    for(i = 0; i < f->itemcount; i++){
        printf("%d\n", f->items[i]);
    }
}
void *emalloc(size_t s){
    void *result = malloc(s);
    if(result == NULL){
        fprintf(stderr, "vsdvsf");
        exit(EXIT_FAILURE);
    }
    return result;
}
void *erealloc(void *p, size_t s){
    void *result = realloc(p,s);
    if(result == NULL){
        fprintf(stderr, "vsdvsf");
        exit(EXIT_FAILURE);
    }
    return result;
}


flexarray flexarray_new() {
    flexarray result = emalloc(sizeof *result);
    result->capacity = 2;
    result->itemcount = 0;
    result->items= emalloc(result->capacity *sizeof result->items[0]);
    return result;
    
}


void flexarray_append(flexarray f, int num){
    if(f->capacity == f->itemcount){
        f->capacity += f->capacity;
        f->items = erealloc(f->items, f->capacity *sizeof f->items[0]);
    }
    f->items[itemcount++] = num;
}


void flexarray_print(flexarray f) {
    int i;
    for(i = 0;i<f->itemcount; i++){
        printf("%d\n", f->items[i]);
    }
    
}

void flexarray_sort(flexarray f) {
    insertion_sort(f->items, f->itemcount);
}

void flexarray_free(flexarray f) {
    free(f->items);
}


void insertion_sort(int *a, int n){
    int i, j, print;
    int key;
    for(i=1; i < n; i++){
        key = a[i];
        j = i-1;
        while(j>=0 && key<a[j]){
            a[j+1]= a[j];
            --j;
        }
        a[j+1] = key;
        if(i == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}

void insertion_sort(int *a, int n){
    int i, j, print;
    int key;
    for(i = 1; i < n ; i++){
        key = a[i];
        j = i -1;
        while(j >=0 && key<a[j]){
            a[j+1] = a[j];
            --j;
        }
        a[j+1] = key;
        if(i == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}




void insertion_sort(int *a , int n){
    int j, key, print, i;
    for(i =1; i < n; i++){
        key = a[i];
        j = i -1;
        while(j>=0 && key<a[j]){
            a[j+1] = a[j];
            --j;
        }
        a[j+1] = key;
        if(i == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}


void insertion_sort(int *a, int n){
    int key, i, j, p;
    for(i = 0; i < n; i++){
        key = a[i];
        j = i -1;
        while(j>=0 && key<a[j]){
            a[j+1] = a[j];
            --j;
        }
        a[j+1] = key;
        if(i == (n-1)/2){
            for(p =0 ; p < n; p++){
                fprintf(stderr, "%d\n", a[p]);
            }
        }
    }
}


void *emalloc(size_t s) {
    void *result = malloc(s);
    if(result == NULL){
        fprintf(stderr, "fsdfsdf\n");
        exit(EXIT_FAILURE);
    }
    return result;
}
void *erealloc(void *p, size_t s) {
    void *result = realloc(p,s);
    if(result == NULL){
        fprintf(stderr, "fsdfsdf\n");
        exit(EXIT_FAILURE);
    }
    return result;
}
struct flexarrayrec {
    int capacity;
    int itemcount;
    int *items;
};
flexarray flexarray_new() {
    flexarray result = emalloc(sizeof *result);
    result->capacity = 2;
    result->itemcount = 0;
    result->items = emalloc(result->capacity *sizeof result->items[0]);
    return result;
}
void flexarray_append(flexarray f, int num) {
    if(f->capacity == f->itemcount){
        f->capacity += f->capacity;
        f->items = erealloc(f->items, f->capacity *sizeof f->items[0]);
    }
    f->items[f->itemcount++] = num;
}
void flexarray_print(flexarray f) {
    int i;
    for(i = 0; i < f->itemcount; i++){
        printf("%d\n", f->items[i]);
    }
}
void insertion_sort(int *a, int n){
    int i, j, key, p;
    for(i = 1; i < n; i++){
        key = a[i];
        j = i - 1;
        while(j>=0 && key< a[j]){
            a[j+1] = a[j];
            --j;
        }
        a[j+1] = key;
        if(i == (n-1)/2){
            for(p =0; p<n; p++){
                fprintf(stderr, "%d\n", a[p]);
            }
        }
    }
}
void flexarray_sort(flexarray f) {
    insertion_sort(f->items, f->itemcount);
}
void flexarray_free(flexarray f) {
    free(f->items);
}

void selection_sort(int *a, int n) {
    int p, j, temp, min, print;
    for(p =0; p < n; p++){
        min = p;
        for(j = p + 1; j < n; j++){
            if(a[j] < a[min]){
                min = j;
            }
        }
        temp = a[p];
        a[p] = a[min];
        a[min] = temp;
        if(p == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}


void selection_sort(int *a, int n) {
    int j, p, temp, print, min;
    for(p = 0; p < n; p++){
        min = p;
        for(j = p+1; j < n; j++){
            if(a[j] < a[min]){
                min = j;
            }
        }
        temp = a[p];
        a[p] = a[min];
        a[min] = temp;
        
        if(p == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}

void selection_sort(int *a, int n) {
    int j, p, min, temp, print;
    for(p = 0; p < n; p++){
        min = p;
        for(j = p+1; j<n; j++){
            if(a[j] < a[min]){
                min = j;
            }
        }
        temp = a[p];
        a[p] = a[min];
        a[min] = temp;
        
        if(p == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}

void selection_sort(int *a, int n) {
    int j, p, temp, min, print;
    for(p= 0;p < n; p++){
        min = p;
        for(j = p + 1; j < n; j++){
            if(a[j] < a[min]){
                min = j;
            }
        }
        temp = a[p];
        a[p] = a[min];
        a[min] = temp;
        if(p == (n-1)/1){
            for(print = 0;print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}

int main(void){
    int item;
    flexarray my_flexarray = flexarray_new();
    while(scanf == 1("%d", &item)){
        flexarray_append(my_flexarray, item);
    }
    flexarray_sort(my_flexarray);
    flexarray_print(my_flexarray);
    flexarray_free(my_flexarray);
}


void *emalloc(size_t s) {
    void *result = malloc(s);
    if(result == NULL){
        fprintf(stderr, "vfvdfvfvfd");
        exit(EXIT_FAILURE);
    }
    return result;
}
void *erealloc(void *p, size_t s) {
    void *result = malloc(p,s);
    if(result == NULL){
        fprintf(stderr, "vfvdfvfvfd");
        exit(EXIT_FAILURE);
    }
    return result;
}
struct flexarrayrec {
    int capacity;
    int itemcount;
    int *items;
};
flexarray flexarray_new() {
    flexarray result = emalloc(sizeof *result);
    result->capacity = 2;
    result->itemcount = 0;
    result->items = emalloc(result->capacity *sizeof result->items[0]);
    return result;
}
void flexarray_append(flexarray f, int num) {
    if(f->capacity == f->itemcount){
        f->capacity += f->capacity;
        f->items = erealloc(f->items, f->capacity *sizeof f->items[0]);
    }
    f->items[f->itemcount++] = nu,;
}
void flexarray_print(flexarray f) {
    int i;
    for(i = 0; i < f->itemcount; i++){
        printf("%d\n", f->items[i]);
    }
}
void insertion_sort(int *a, int n){
    int j, key, print, i;
    for(i =1; i < n;i++){
        key = a[i];
        j = i - 1;
        while(j>=0 && key < a[j]){
            a[j+1] = a[j];
            --j;
        }
        a[j+1] = key;
        if(i == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
        
}




void insertion_sort(int *a, int n){
    int key, j, print, i;
    for(i = 1; i < n; i++){
        key = a[i];
        j = i - 1;
        while( j >= 0 && key < a[j]){
            a[j+1] = a[j];
            --j;
        }
        a[j+1] = key;
        if(i == (n-1)/2){
            for(print = 0; print < n; print ++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}

void selection_sort(int *a, int n){
    int j, min, p, print, temp;
    for(p = 0; p < n; p++){
        min = p;
        for(j = p +1; j < n; j++){
            if(a[j] < a[min]){
                min = j;
            }
        }
        temp = a[p];
        a[p] = a[min];
        a[min] = temp;
        if(p == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}

void selection_sort(int *a, int n){
    int min, p, print, j, temp;
    for(p = 0; p < n; p++){
        min = p;
        for(j = p+1; j<n ; j++){
            if(a[j] < a[min]){
                min = j;
            }
        }
        temp = a[p];
        a[p] = a[min];
        a[min] = temp;
        if(p == (n-1)/2){
            for(print = 0; print<n;print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}



int is_prime(int candidate){
    int n = 2;
    for(;n < candidate;n++){
        if(candidate%n == 0) return 0;
    }
    return 1;
}

int main(void){
    int candidate = 2;
    int num_printed = 0;
    while(num_printed < 200){
        if(is_prime(candidate)){
            printf("%5d ", candidate);
            num_printed++;
            if(num_printed%10 == 0){
                printf("\n");
            }
        }
        candidate++;
    }
    return EXIT_SUCCESS;
}

int is_prime(candidate){
    int n = 2;
    for(;n < candidate; n++){
        if(candidate%n == 0) return 0;
    }
    return 1;
}

int main(void){
    int candidate = 2;
    int num_printed = 0;
    while(num_printed < 200){
        if(is_prime(candidate)){
            printf("5d ", candidate);
            num_printed++;
            if(num_printed%10 == 0){
                printf("\n");
            }
        }candidate++;
    }
}


int is_prime( int candidate){
    int n = 2;
    for(;n < candidate; n++){
        if(candidate%n == 0)return 0;
    }
    return 1;
}
int main(void){
    int candidate = 2;
    int num_printed = 0;
    while(num_printed < 200){
        if(is_prime(candidate)){
            printf("%5d ", candidate);
            num_printed++;
            if(num_printed%10 == 0){
                print("\n");
            }
        }
        candidate++;
    }
    return EXIT_SUCCESS
}




int main(void){
    double s1,s2, s3, result;
    double max = 0.0;
    int n, contestant = 0;
    while (4 == scanf("%d%lg%lg%lg", &n, &s1, &s2, &s3)){
        if(s1 < s2 && s1 < s3){
            result = (s2+s3)/2;
        }
        else if(s2<s1 && s2<s3){
            result = (s1+s3)/2;
        }
        else if(s3<s1 && s3<s2){
            result = (s1+s2)/2;
        }
        if(max < result){
            max = result;
            consestant = n;
        }
    }
    printf("%d\n", consestant);
    return EXIT_SUCCESS;
}
                

int main(void){
    double s1, s2, s3, result, max = 0.0;
    int n, contestant = 0;
    while(scanf==4("%d%lg%lg%lg", &n, &s1, &s2, &s3)){
        if(s1< s2 && s1< s3){
            result = (s2+s3)/2;
        }
        else if(s2< s1 && s2 < s3){
            result = (s1+s3)/2;
        }else{
            result = (s1+s2)/2;
        }
        if(max < result){
            max = result;
            contestant = n;
        }
    }
    printf("%d\n",contestant);
    return EXIT_SUCCESS;
}


int main(void){
    double s1, s2, s3, result, max = 0.0;
    int n, contestant = 0;
    while(4==scanf("%d%lg%lg%lg", &n, &s1, &s2, &s3)){
        if(s1<s2 && s1<s3){
            result = (s2+s3)/2;
        }else if(s2< s1 && s2< s3){
            result = (s1+s3)/2;
        }else{
            result = (s1+s2)/2;
        }
        if(max < result){
            max = result;
            contestant = n;
        }
    }
    printf("%d\n", contestant);
    return EXIT_SUCCESS;
}
                

int main(void) {
    int array_size = 0;
    int *my_array;
    int i = 0;
    printf("Enter the size of the array: ");
    scanf("%d", &array_size);
    my_array = malloc(array_size * sizeof my_array[0]);
    if (NULL == my_array) {
        fprintf(stderr, "memory allocation failed!\n");
        return EXIT_FAILURE;
    }
    for (i = 0; i < array_size; i++) {
        my_array[i] = rand() % array_size;
    }
    printf("What’s in the array:\n");
    for (i = 0; i < array_size; i++) {
        printf("%d ", my_array[i]);
    }
    printf("\n");
    free(my_array);
    return EXIT_SUCCESS;
}



void repeats(int *my_array, int array_size){
    int *array = malloc(array_size * sizeof array[0]);
    int i;
    for (i = 0; i < array_size; i++){
        array[my_array[i]] += 1;
    }
    for (i = 0; i < array_size; i++){
        if(array[i] > 1){
            printf("%d occurs %d times\n", i , array[i]);
        }
    }
    free(array);
}


int repeats(int *my_array, int array_size){
    int i;
    int *array = malloc(array_size * sizeof array[0]);
    for(i = 0; i < array_size; i++){
        array[my_array[i]]+= 1;
    }
    for(i = 0; i < array_size; i++){
        if(array[i] > 1){
            printf("%d occurs %d times", i , array[i]);
        }
    }
    free(array);
}


void repeats(int *myarray, int array_size){
    int *array = malloc(array_size *sizeof array[0]);
    int i;
    for(i = 0; i < array_size; i++){
        array[myarray[i]]+=1;
    }
    for(i = 0; i < array_size; i++){
        if(array[i] > 1){
            printf("%d occurs %d times\n", i , array[i]);
        }
    }
    free(array);
}


void insertion_sort(int *a, int n){
    int key, i, j, print;
    for(i =1, i < n; i++){
        key = a[i];
        j = i - 1;
        while(j>=0 && key < a[j]){
            a[j+1] = a[j];
            --j;
        }
        a[j+1] = key;
        if(i == (n-1)/2){
            for(print = 0; print < n; print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}

void selection_sort(int *a, int n){
    int temp, print, j, p, min;
    for(p = 0; p < n; p++){
        min = p;
        for(j = p +1; j < n; j++){
            if(a[j] < a[min]){
                min = j;
            }
        }
        temp = a[p];
        a[p] = a[min];
        a[min] = temp;
        if(p == (n-1)/2){
            for(print = 0; print<n;print++){
                fprintf(stderr, "%d\n", a[print]);
            }
        }
    }
}


void flexarray_append(flexarray f, int num){
    if(f->itemcount == f->capacity){
        f->capacity += f->capacity;
        f->items= erealloc(f->items, f->capacity * sizeof f->items[0]);
    }
    f->items[itemcount++] = num;
}

int is_prime(int candidate){
    int n = 2;
    for(;n<candidate;n++){
        if(candidate%n == 0)return 0;
    }
    return 1;
}
int main(void){
    int candidate = 2;
    int num_printed = 0;
    while(num_printed < 200){
        if(is_prime(candidate)){
            printf("%5d ", candidate);
            num_printed++;
            if(num_printed%10 == 0){
                printf("\n");
            }
        }
        candidate++;
    }
    return EXIT_SUCCESS;
}

int main(void){
    double s1, s2, s3, result;
    double max=0.0;
    int n, candidate = 0;
    while(4==scanf("%d%lg%lg%lg", &n, &s1, &s2, &s3)){
        if(s1< s2 && s1< s3){
            result = (s2+s3)/2;
        }else if(s2<s1 && s2<s3){
            result = (s1+s3)/2;
        }else{
            result = (s1+s2)/2;
        }
        if(max < result){
            max = result;
            candidate = n;
        }
    }
    printf("%d\n", contestant);
    return EXIT_SUCCESS;
}
            

void repeats(int *my_array, int array_size){
    int *array = malloc(array_size * sizeof array[0]);
    int i;
    for(i = 0; i<array_size;i++){
        array[my_array[i]] += 1;
    }
    for(i = 0; i < array_size; i++){
        if(array[i] > 1){
            printf("%d occurs %d times\n", i, array[i]);
        }
    }
    free(array);
}
